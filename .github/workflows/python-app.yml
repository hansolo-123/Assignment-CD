on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    runs-on: self-hosted
    steps:
      - name: Check if Python is installed
        run: |
          if command -v python3 >/dev/null 2>&1 ; then
            echo "Python is already installed"
            exit 0
          fi

      - name: Install Python
        run: |
          sudo apt-get update
          sudo apt-get install -y python3

      - name: Generate requirements.txt
        run: |
          pip install pipreqs
          pipreqs . --force
          python3 -m pip install --upgrade pip
          pip3 install -r requirements.txt

      - name: Get server IP
        run: |
          echo "Server IP: ${{ secrets.SERVER_IP }}"
          echo "::set-output name=server_ip::${{ secrets.SERVER_IP }}"

      - name: Authenticate with SSH
        uses: webfactory/ssh-agent@v0.5.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          ssh-add -l
          ssh -o StrictHostKeyChecking=no -p 22 root@${{ needs.build.outputs.server_ip }} exit

      - name: Deploy App - Step 1
        run: rsync -avz --exclude='.git*' --exclude='__pycache__' -e "ssh -o StrictHostKeyChecking=no -p 22" /github/workspace/Assignment-CD/ root@${{ needs.build.outputs.server_ip }}:/home/deploy/app

      - name: Deploy App - Step 2
        run: ssh -o StrictHostKeyChecking=no -p 22 root@${{ needs.build.outputs.server_ip }} 'chmod +x /home/deploy/app/deploy.sh'

      - name: Deploy App - Step 3
        run: ssh -o StrictHostKeyChecking=no -p 22 root@${{ needs.build.outputs.server_ip }} '/home/deploy/app/deploy.sh'

      - name: Restart farm service
        run: ssh -o StrictHostKeyChecking=no -p 22 root@${{ needs.build.outputs.server_ip }} 'sudo systemctl daemon-reload && sudo systemctl restart farm.service'

      - name: Log deployment status
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEPLOYMENT_ID: ${{ github.run_id }}
          DEPLOYMENT_ENVIRONMENT: production
          DEPLOYMENT_DESCRIPTION: "Deployment Status"
          DEPLOYMENT_URL: https://example.com
        run: |
          curl \
            -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            -d '{"state": "success", "environment": "'"$DEPLOYMENT_ENVIRONMENT"'", "description": "'"$DEPLOYMENT_DESCRIPTION"'", "auto_inactive": true, "environment_url": "'"$DEPLOYMENT_URL"'"}' \
            https://api
