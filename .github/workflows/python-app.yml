on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    runs-on: self-hosted
    steps:
      - name: Check if Python is installed
        run: |
          if command -v python3 >/dev/null 2>&1 ; then
            echo "Python is already installed"
            exit 0
          fi

      - name: Install Python
        run: |
          sudo apt-get update
          sudo apt-get install -y python3

      - name: Generate requirements.txt
        run: |
          pip install pipreqs
          pipreqs . --force
          python3 -m pip install --upgrade pip
          pip3 install -r requirements.txt

      - name: Get server IP
        run: |
          echo "Server IP: ${{ secrets.SERVER_IP }}"
          echo "::set-output name=server_ip::${{ secrets.SERVER_IP }}"

          run: |
            server_ip="***"
            echo "Server IP: $server_ip"
            echo "SERVER_IP=$server_ip" >> $GITHUB_ENV

            # Write the SSH private key to a file called 'ssh_key'
            echo "$SSH_PRIVATE_KEY" > ssh_key

            # Restrict permissions on the file to only the current user
            chmod 600 ssh_key

            # Extract the public key from the private key and compare it to the authorized_keys file
            ssh-keygen -y -f ssh_key | diff - /root/.ssh/authorized_keys
          shell: /usr/bin/bash -e {0}



      - name: Deploy App - Step 1
        run: |
          rsync -avz --exclude='.git*' --exclude='__pycache__' -e "ssh -o StrictHostKeyChecking=no -p 22" /github/workspace/Assignment-CD/ root@${{ needs.build.outputs.server_ip }}:/home/deploy/app

      - name: Deploy App - Step 2
        run: |
          ssh -o StrictHostKeyChecking=no -p 22 root@${{ needs.build.outputs.server_ip }} 'chmod +x /home/deploy/app/deploy.sh'

      - name: Deploy App - Step 3
        run: |
          ssh -o StrictHostKeyChecking=no -p 22 root@${{ needs.build.outputs.server_ip }} '/home/deploy/app/deploy.sh'

      - name: Restart farm service
        run: |
          ssh -o StrictHostKeyChecking=no -p 22 root@${{ needs.build.outputs.server_ip }} 'sudo systemctl daemon-reload && sudo systemctl restart farm.service'
